
  // // -----------------------infinite Query 로직 (무시하기)
  // // export const fetchSearchedListByTag = async (
  // //   tag: string,
  // //   searchKeyword: string,
  // //   likes: sortedByLike,
  // //   pageParam: any
  // // ): Promise<{ data: PicList[]; lastVisible: any }> => {
  // //   // ---------데이터 가져오는 갯수 3개로 설정-------------------
  // //   const sampleCollection = collection(db, 'photos');

  // //
  // //검색어만 들어올때
  // // if (searchKeyword) {
  // //   const sampleCollection = collection(db, 'photos');
  // //   const q = query(sampleCollection, where('tags', 'array-contains', searchKeyword.toLowerCase()));

  // //   const Snapshot = await getDocs(q);
  // //   const pictureList: PicList[] = Snapshot.docs.map((doc) => doc.data() as PicList);
  // //   // console.log('검색 결과 in picLists', pictureList);
  // //   return pictureList;
  // // }
  // //태그만 들어올때
  // //
  // // if (tag) {
  // // let q;
  // // if (tag === 'ALL') {
  // //   q = query(sampleCollection, orderBy('id'), limit(2));
  // // } else {
  // //   q = query(sampleCollection, where('tags', 'array-contains', tag));
  // // }
  // // pageParam++;
  // // const Snapshot = await getDocs(q);
  // // console.log('???');
  // // const lastVisible = Snapshot.docs[Snapshot.docs.length - 1 + pageParam];
  // const lastVisible = pageParam;
  // // // console.log('스냅샷 길이', Snapshot.docs.length);
  // // // console.log({ lastVisible });
  // //다음 페이지
  // // 6. 마지막 데이터를 기준으로 그 다음 2개를 id 순서대로 가져온다.
  // const next = query(sampleCollection, orderBy('id'), startAfter(lastVisible), limit(2));
  // // const next = query(sampleCollection, orderBy('id'));

  // const nextresult = await getDocs(next);
  // // console.log({ docs: nextresult.docs });
  // // 7. pictureList라는 실제 우리가 사용하는 데이터 형태로 만든다.
  // const pictureList = nextresult.docs.map((doc) => {
  //   const data = doc.data() as PicList;
  //   // // console.log('얍얍얍얍', data, '페이지파람', pageParam);

  //   return data;
  // });
  // // console.log({ pictureList });
  // return {
  //   data: pictureList,
  //   lastVisible: nextresult.docs[nextresult.docs.length - 1]
  // };
  // }
  //좋아요만 들어왔을 때
  // if (likes) {
  //   const sampleCollection = collection(db, 'photos');
  //   const q = query(sampleCollection, orderBy('likes', 'desc'), limit(3));

  //   const snapshot = await getDocs(q);
  //   const picList = snapshot.docs.map((doc) => {
  //     const data = doc.data() as PicList;
  //     return data;
  //   });

  //   // console.log('liked 필터링 ', picList); // Log to verify data

  //   return picList;
  // }
  //일단 여기는 보류
  // return [];





  좋아요  //   //좋아요만 들어왔을 때-------------
  //   if (likes === 'likes') {
  //     // 검색 후, like 필터버튼 누를때
  //     if (keywords.length > 0) {
  //       // console.log('검색+ likes:');
  //       const sampleCollection = collection(db, 'photos');
  //       const q = query(sampleCollection, orderBy('likes', 'desc'), limit(2));
  //       const snapshot = await getDocs(q);
  //       const picList = snapshot.docs.map((doc) => {
  //         const data = doc.data() as PicList;
  //         return data;
  //       });
  //       // console.log('좋아요 api에서 반환하는 데이터', picList);
  //       return picList;
  //     } else {
  //       // console.log('호버시 생기는 콘솔 likes');
  //       const sampleCollection = collection(db, 'photos');
  //       const q = query(sampleCollection, orderBy('likes', 'desc'), limit(2));
  //       const snapshot = await getDocs(q);
  //       const picList = snapshot.docs.map((doc) => {
  //         const data = doc.data() as PicList;
  //         return data;
  //       });
  //       // console.log('좋아요 api에서 반환하는 데이터', picList);
  //       return picList;
  //     }
  //   }

  //   return [];
  // };